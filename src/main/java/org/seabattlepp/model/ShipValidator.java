package org.seabattlepp.model;

import java.util.List;
import java.util.Set;


public class ShipValidator {

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–µ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∞–±–ª—è:
    // 1) –Ω–µ –≤–∏—Ö–æ–¥–∏—Ç—å –∑–∞ –º–µ–∂—ñ –ø–æ–ª—è
    // 2) –Ω–µ –ø–µ—Ä–µ—Ç–∏–Ω–∞—î—Ç—å—Å—è –∑ —ñ–Ω—à–∏–º–∏
    // 3) –Ω–µ –ø—Ä–∏–ª—è–≥–∞—î –¥–æ —ñ–Ω—à–∏—Ö (–≤–∫–ª—é—á–Ω–æ –∑ –¥—ñ–∞–≥–æ–Ω–∞–ª–ª—é)
    public boolean isValidPlacement(List<int[]> potentialCoordinates, Set<String> occupiedCoordinates) {
        for (int[] coord : potentialCoordinates) {
            int row = coord[0];
            int col = coord[1];

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: —á–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –≤ –º–µ–∂–∞—Ö –¥–æ—à–∫–∏ 1..10
            if (row < 1 || row > 10 || col < 1 || col > 10) {
                return false;
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: —á–∏ —Ü—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –≤–∂–µ –Ω–µ –∑–∞–π–Ω—è—Ç–∞
            if (isCoordinateOccupied(row, col, occupiedCoordinates)) { // –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–∫–ª–∞–¥–∞–Ω–Ω—è –æ–¥–∏–Ω –Ω–∞ –æ–¥–Ω–æ–≥–æ –±—É—Ç—î—Ä–±—Ä–æ–¥–æ–º
                return false;
            }

            // üî∏ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –Ω–∞–≤–∫–æ–ª–æ –Ω–µ–º–∞—î —ñ–Ω—à–∏—Ö –∫–æ—Ä–∞–±–ª—ñ–≤
            for (int dr = -1; dr <= 1; dr++) {
                for (int dc = -1; dc <= 1; dc++) {
                    if (dr == 0 && dc == 0) continue; // –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å–∞–º—É –∫–ª—ñ—Ç–∏–Ω–∫—É
                    if (isCoordinateOccupied(row + dr, col + dc, occupiedCoordinates)) {
                        return false; // —è–∫—â–æ —Å—É—Å—ñ–¥–Ω—è –∫–ª—ñ—Ç–∏–Ω–∫–∞ –∑–∞–π–Ω—è—Ç–∞ - –Ω–µ –∫–∞–Ω–æ–Ω
                    }
                }
            }
        }
        return true;
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –∑–∞–π–Ω—è—Ç–∞ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –º–Ω–æ–∂–∏–Ω–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ "row,col")
    private boolean isCoordinateOccupied(int row, int col, Set<String> occupiedCoordinates) {
        return occupiedCoordinates.contains(row + "," + col);
    }
}
